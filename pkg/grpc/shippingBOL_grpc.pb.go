// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/grpc/shippingBOL.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShippingBOLServiceClient is the client API for ShippingBOLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingBOLServiceClient interface {
	CreateBol(ctx context.Context, in *CreateBolRequest, opts ...grpc.CallOption) (*CreateBolResponse, error)
	UpdateBol(ctx context.Context, in *UpdateBolRequest, opts ...grpc.CallOption) (*CreateBolResponse, error)
}

type shippingBOLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingBOLServiceClient(cc grpc.ClientConnInterface) ShippingBOLServiceClient {
	return &shippingBOLServiceClient{cc}
}

func (c *shippingBOLServiceClient) CreateBol(ctx context.Context, in *CreateBolRequest, opts ...grpc.CallOption) (*CreateBolResponse, error) {
	out := new(CreateBolResponse)
	err := c.cc.Invoke(ctx, "/grpc.ShippingBOLService/CreateBol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingBOLServiceClient) UpdateBol(ctx context.Context, in *UpdateBolRequest, opts ...grpc.CallOption) (*CreateBolResponse, error) {
	out := new(CreateBolResponse)
	err := c.cc.Invoke(ctx, "/grpc.ShippingBOLService/UpdateBol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingBOLServiceServer is the server API for ShippingBOLService service.
// All implementations should embed UnimplementedShippingBOLServiceServer
// for forward compatibility
type ShippingBOLServiceServer interface {
	CreateBol(context.Context, *CreateBolRequest) (*CreateBolResponse, error)
	UpdateBol(context.Context, *UpdateBolRequest) (*CreateBolResponse, error)
}

// UnimplementedShippingBOLServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShippingBOLServiceServer struct {
}

func (UnimplementedShippingBOLServiceServer) CreateBol(context.Context, *CreateBolRequest) (*CreateBolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBol not implemented")
}
func (UnimplementedShippingBOLServiceServer) UpdateBol(context.Context, *UpdateBolRequest) (*CreateBolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBol not implemented")
}

// UnsafeShippingBOLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingBOLServiceServer will
// result in compilation errors.
type UnsafeShippingBOLServiceServer interface {
	mustEmbedUnimplementedShippingBOLServiceServer()
}

func RegisterShippingBOLServiceServer(s grpc.ServiceRegistrar, srv ShippingBOLServiceServer) {
	s.RegisterService(&ShippingBOLService_ServiceDesc, srv)
}

func _ShippingBOLService_CreateBol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingBOLServiceServer).CreateBol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ShippingBOLService/CreateBol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingBOLServiceServer).CreateBol(ctx, req.(*CreateBolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingBOLService_UpdateBol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingBOLServiceServer).UpdateBol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ShippingBOLService/UpdateBol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingBOLServiceServer).UpdateBol(ctx, req.(*UpdateBolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingBOLService_ServiceDesc is the grpc.ServiceDesc for ShippingBOLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingBOLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ShippingBOLService",
	HandlerType: (*ShippingBOLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBol",
			Handler:    _ShippingBOLService_CreateBol_Handler,
		},
		{
			MethodName: "UpdateBol",
			Handler:    _ShippingBOLService_UpdateBol_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/shippingBOL.proto",
}
