// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/grpc/business_partner.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BusinessPartnerServiceClient is the client API for BusinessPartnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessPartnerServiceClient interface {
	CreateBusinessPartner(ctx context.Context, in *CreateBusinessPartnerRequest, opts ...grpc.CallOption) (*CreateBusinessPartnerResponse, error)
	UpdateBusinessPartner(ctx context.Context, in *UpdateBusinessPartnerRequest, opts ...grpc.CallOption) (*CreateBusinessPartnerResponse, error)
}

type businessPartnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessPartnerServiceClient(cc grpc.ClientConnInterface) BusinessPartnerServiceClient {
	return &businessPartnerServiceClient{cc}
}

func (c *businessPartnerServiceClient) CreateBusinessPartner(ctx context.Context, in *CreateBusinessPartnerRequest, opts ...grpc.CallOption) (*CreateBusinessPartnerResponse, error) {
	out := new(CreateBusinessPartnerResponse)
	err := c.cc.Invoke(ctx, "/proto.BusinessPartnerService/CreateBusinessPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessPartnerServiceClient) UpdateBusinessPartner(ctx context.Context, in *UpdateBusinessPartnerRequest, opts ...grpc.CallOption) (*CreateBusinessPartnerResponse, error) {
	out := new(CreateBusinessPartnerResponse)
	err := c.cc.Invoke(ctx, "/proto.BusinessPartnerService/UpdateBusinessPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessPartnerServiceServer is the server API for BusinessPartnerService service.
// All implementations should embed UnimplementedBusinessPartnerServiceServer
// for forward compatibility
type BusinessPartnerServiceServer interface {
	CreateBusinessPartner(context.Context, *CreateBusinessPartnerRequest) (*CreateBusinessPartnerResponse, error)
	UpdateBusinessPartner(context.Context, *UpdateBusinessPartnerRequest) (*CreateBusinessPartnerResponse, error)
}

// UnimplementedBusinessPartnerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBusinessPartnerServiceServer struct {
}

func (UnimplementedBusinessPartnerServiceServer) CreateBusinessPartner(context.Context, *CreateBusinessPartnerRequest) (*CreateBusinessPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessPartner not implemented")
}
func (UnimplementedBusinessPartnerServiceServer) UpdateBusinessPartner(context.Context, *UpdateBusinessPartnerRequest) (*CreateBusinessPartnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessPartner not implemented")
}

// UnsafeBusinessPartnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessPartnerServiceServer will
// result in compilation errors.
type UnsafeBusinessPartnerServiceServer interface {
	mustEmbedUnimplementedBusinessPartnerServiceServer()
}

func RegisterBusinessPartnerServiceServer(s grpc.ServiceRegistrar, srv BusinessPartnerServiceServer) {
	s.RegisterService(&BusinessPartnerService_ServiceDesc, srv)
}

func _BusinessPartnerService_CreateBusinessPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessPartnerServiceServer).CreateBusinessPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BusinessPartnerService/CreateBusinessPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessPartnerServiceServer).CreateBusinessPartner(ctx, req.(*CreateBusinessPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessPartnerService_UpdateBusinessPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessPartnerServiceServer).UpdateBusinessPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BusinessPartnerService/UpdateBusinessPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessPartnerServiceServer).UpdateBusinessPartner(ctx, req.(*UpdateBusinessPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessPartnerService_ServiceDesc is the grpc.ServiceDesc for BusinessPartnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessPartnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BusinessPartnerService",
	HandlerType: (*BusinessPartnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusinessPartner",
			Handler:    _BusinessPartnerService_CreateBusinessPartner_Handler,
		},
		{
			MethodName: "UpdateBusinessPartner",
			Handler:    _BusinessPartnerService_UpdateBusinessPartner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/business_partner.proto",
}
