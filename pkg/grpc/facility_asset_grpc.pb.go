// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: pkg/grpc/facility_asset.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FacilityAssetServiceClient is the client API for FacilityAssetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FacilityAssetServiceClient interface {
	CreateFacilityAsset(ctx context.Context, in *CreateFacilityAssetRequest, opts ...grpc.CallOption) (*CreateFacilityAssetResponse, error)
	UpdateFacilityAsset(ctx context.Context, in *UpdateFacilityAssetRequest, opts ...grpc.CallOption) (*CreateFacilityAssetResponse, error)
}

type facilityAssetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFacilityAssetServiceClient(cc grpc.ClientConnInterface) FacilityAssetServiceClient {
	return &facilityAssetServiceClient{cc}
}

func (c *facilityAssetServiceClient) CreateFacilityAsset(ctx context.Context, in *CreateFacilityAssetRequest, opts ...grpc.CallOption) (*CreateFacilityAssetResponse, error) {
	out := new(CreateFacilityAssetResponse)
	err := c.cc.Invoke(ctx, "/grpc.FacilityAssetService/CreateFacilityAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilityAssetServiceClient) UpdateFacilityAsset(ctx context.Context, in *UpdateFacilityAssetRequest, opts ...grpc.CallOption) (*CreateFacilityAssetResponse, error) {
	out := new(CreateFacilityAssetResponse)
	err := c.cc.Invoke(ctx, "/grpc.FacilityAssetService/UpdateFacilityAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FacilityAssetServiceServer is the server API for FacilityAssetService service.
// All implementations should embed UnimplementedFacilityAssetServiceServer
// for forward compatibility
type FacilityAssetServiceServer interface {
	CreateFacilityAsset(context.Context, *CreateFacilityAssetRequest) (*CreateFacilityAssetResponse, error)
	UpdateFacilityAsset(context.Context, *UpdateFacilityAssetRequest) (*CreateFacilityAssetResponse, error)
}

// UnimplementedFacilityAssetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFacilityAssetServiceServer struct {
}

func (UnimplementedFacilityAssetServiceServer) CreateFacilityAsset(context.Context, *CreateFacilityAssetRequest) (*CreateFacilityAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFacilityAsset not implemented")
}
func (UnimplementedFacilityAssetServiceServer) UpdateFacilityAsset(context.Context, *UpdateFacilityAssetRequest) (*CreateFacilityAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFacilityAsset not implemented")
}

// UnsafeFacilityAssetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FacilityAssetServiceServer will
// result in compilation errors.
type UnsafeFacilityAssetServiceServer interface {
	mustEmbedUnimplementedFacilityAssetServiceServer()
}

func RegisterFacilityAssetServiceServer(s grpc.ServiceRegistrar, srv FacilityAssetServiceServer) {
	s.RegisterService(&FacilityAssetService_ServiceDesc, srv)
}

func _FacilityAssetService_CreateFacilityAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFacilityAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilityAssetServiceServer).CreateFacilityAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FacilityAssetService/CreateFacilityAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilityAssetServiceServer).CreateFacilityAsset(ctx, req.(*CreateFacilityAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilityAssetService_UpdateFacilityAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFacilityAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilityAssetServiceServer).UpdateFacilityAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FacilityAssetService/UpdateFacilityAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilityAssetServiceServer).UpdateFacilityAsset(ctx, req.(*UpdateFacilityAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FacilityAssetService_ServiceDesc is the grpc.ServiceDesc for FacilityAssetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FacilityAssetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.FacilityAssetService",
	HandlerType: (*FacilityAssetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFacilityAsset",
			Handler:    _FacilityAssetService_CreateFacilityAsset_Handler,
		},
		{
			MethodName: "UpdateFacilityAsset",
			Handler:    _FacilityAssetService_UpdateFacilityAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/facility_asset.proto",
}
